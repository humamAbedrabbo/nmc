// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NMC.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NMC.Infrastructure.Migrations
{
    [DbContext(typeof(MedContext))]
    [Migration("20201209102851_M5")]
    partial class M5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("NMC.Core.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "23dad0b2-48bf-4cf4-8177-5239f585fcd7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "940fee37-7e11-434f-b40d-c9daca78b505",
                            Name = "Admission",
                            NormalizedName = "ADMISSION"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "dd84191b-2a4b-49d9-8d60-6c4648aa9da1",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("NMC.Core.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName")
                        .HasName("AK_Username");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9bd085f-fa4f-4571-81cc-56091e56738a",
                            Email = "admin@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECQXiqJrXRoPWeTIITHNjvb+xcznL1Ya9UKZA491m7hjLeX8fGPaKUvtbjK4P888YA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b82b8e0b-b89a-4a43-a727-4ff028782a43",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84faf830-8e89-4bed-ad94-3cdaa7368600",
                            Email = "admission@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMISSION@LOCALHOST",
                            NormalizedUserName = "ADMISSION",
                            PasswordHash = "AQAAAAEAACcQAAAAEP/qZtEjGhBxf1+72qExgnUcINsQ+AyZSjmrSiYrVQOPOGJBcGsQQ+tIfFfEbhW/RA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d56f8cce-4303-4480-b841-700450353d6e",
                            TwoFactorEnabled = false,
                            UserName = "admission"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "725f09bd-15c0-446a-83d5-c11c7483af44",
                            Email = "doctor@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@LOCALHOST",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEHpwL8FCNwjJmU4ZXaVIZpc8ZVzHE0PTXBAZOgAu4Hr18BGtmXR2nCxeGDoVC53kjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9e4b574-15aa-41a9-9e40-b09cf04d3d62",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.Admission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("ActiveThru")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AdmissionTime")
                        .HasColumnType("text");

                    b.Property<int>("AdmissionTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("Companion")
                        .HasColumnType("boolean");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DischargeTime")
                        .HasColumnType("text");

                    b.Property<int?>("DischargeTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("FileNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FoodAllergy")
                        .HasColumnType("text");

                    b.Property<string>("Meals")
                        .HasColumnType("text");

                    b.Property<string>("MedicalAllergy")
                        .HasColumnType("text");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("PoliceCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReferralLetter")
                        .HasColumnType("text");

                    b.Property<int?>("ReferrerDoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DischargeTypeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReferrerDoctorId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("NMC.Domain.Models.AdmissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(100L, null, null, null, null, null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.HasKey("Id");

                    b.ToTable("AdmissionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Normal",
                            NameAr = "عادي"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Emergency",
                            NameAr = "إسعاف"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Accident",
                            NameAr = "حادث"
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Visitor")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("NMC.Domain.Models.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(100L, null, null, null, null, null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Routine checkup",
                            NameAr = "فحص روتيني"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Consulting",
                            NameAr = "استشارة طبية"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vaccinations",
                            NameAr = "لقاح"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Eye Care",
                            NameAr = "عينية"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Radiology",
                            NameAr = "تصوير شعاعي"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Referrals",
                            NameAr = "إحالة"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Other",
                            NameAr = "نوع آخر"
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AttendanceSheets");
                });

            modelBuilder.Entity("NMC.Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(100L, null, null, null, null, null);

                    b.Property<int>("DepartmentType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentType = 0,
                            Name = "Administration",
                            NameAr = "الادارة"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentType = 0,
                            Name = "Financial and Accounting Department ",
                            NameAr = "الإدارة المالية و قسم المحاسبة"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentType = 1,
                            Name = "Pediatric Department -  Incubators section (NICU)",
                            NameAr = "جناح الأطفال - قسم الحواضن"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentType = 1,
                            Name = "Internal Medicine",
                            NameAr = "قسم الداخلية الباطنية"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentType = 1,
                            Name = "Intensive Care Unite (ICU)",
                            NameAr = "قسم العناية المشددة"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentType = 1,
                            Name = "Obstetric & Genecology",
                            NameAr = "جناح النسائية والمخاض"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentType = 1,
                            Name = "Dialysis",
                            NameAr = "قسم غسيل الكلى"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentType = 1,
                            Name = "Arthroscopy",
                            NameAr = "قسم التنظير"
                        },
                        new
                        {
                            Id = 9,
                            DepartmentType = 2,
                            Name = "Cath Lab - Cardiovascular (CCU)",
                            NameAr = "قسم العناية القلبة والقثطرة القلبية"
                        },
                        new
                        {
                            Id = 10,
                            DepartmentType = 1,
                            Name = "Blood vessels",
                            NameAr = "قسم الأوعية"
                        },
                        new
                        {
                            Id = 11,
                            DepartmentType = 1,
                            Name = "Urology",
                            NameAr = "قسم البولية"
                        },
                        new
                        {
                            Id = 12,
                            DepartmentType = 1,
                            Name = "Respiratory System Diseases",
                            NameAr = "أمراض الجهاز التنفسي"
                        },
                        new
                        {
                            Id = 13,
                            DepartmentType = 0,
                            Name = "Catering section",
                            NameAr = "قسم الإطعام"
                        },
                        new
                        {
                            Id = 14,
                            DepartmentType = 1,
                            Name = "Emergency (ER)",
                            NameAr = "قسم الإسعاف والطوارئ"
                        },
                        new
                        {
                            Id = 15,
                            DepartmentType = 0,
                            Name = "Maintenance Department",
                            NameAr = "قسم الصيانة"
                        },
                        new
                        {
                            Id = 16,
                            DepartmentType = 2,
                            Name = "Laboratory",
                            NameAr = "المخبر"
                        },
                        new
                        {
                            Id = 17,
                            DepartmentType = 2,
                            Name = "Radiography",
                            NameAr = "قسم التصوير الشعاعي"
                        },
                        new
                        {
                            Id = 18,
                            DepartmentType = 0,
                            Name = "Medical warehouse",
                            NameAr = "المستودع الطبي"
                        },
                        new
                        {
                            Id = 19,
                            DepartmentType = 0,
                            Name = "Pharmacy",
                            NameAr = "الصيدلية"
                        },
                        new
                        {
                            Id = 20,
                            DepartmentType = 1,
                            Name = "Operation Rooms (OR)",
                            NameAr = "جناح العمليات"
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.DepartmentDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DepartmentDoctors");
                });

            modelBuilder.Entity("NMC.Domain.Models.DepartmentRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("DepartmentRooms");
                });

            modelBuilder.Entity("NMC.Domain.Models.DischargeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(100L, null, null, null, null, null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.HasKey("Id");

                    b.ToTable("DischargeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Healing",
                            NameAr = "شفاء"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Improvement",
                            NameAr = "تحسن"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ill",
                            NameAr = "سوء"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Death",
                            NameAr = "وفاة"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Other",
                            NameAr = "أخرى"
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<bool>("Consultant")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text");

                    b.Property<bool>("Referrer")
                        .HasColumnType("boolean");

                    b.Property<string>("Speciality")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<bool>("Surgeon")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Address = "Planet Earth",
                            Biography = "Greate personality",
                            Consultant = true,
                            Email = "an.example@localhost",
                            FirstName = "An",
                            Gender = 0,
                            JoiningDate = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            Mobile = "+963-993-555555",
                            Phone = "+963-11-5555555",
                            PhotoPath = "user.jpg",
                            Referrer = true,
                            Speciality = "Cancer",
                            Surgeon = false,
                            Username = "doctor"
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.DoctorEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Grade")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorEducations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompleteDate = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Degree = "Degree 1",
                            DoctorId = 1,
                            Grade = "A",
                            Institution = "University 1",
                            StartingDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "Cancer"
                        },
                        new
                        {
                            Id = 2,
                            CompleteDate = new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Degree = "Degree 2",
                            DoctorId = 1,
                            Grade = "A",
                            Institution = "University 2",
                            StartingDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "Cancer2"
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.DoctorExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("PeriodFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PeriodTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorExperiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "Company 1",
                            DoctorId = 1,
                            Location = "UK",
                            PeriodFrom = new DateTime(2006, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeriodTo = new DateTime(2008, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Doctor"
                        },
                        new
                        {
                            Id = 2,
                            Company = "Company 2",
                            DoctorId = 1,
                            Location = "UK",
                            PeriodFrom = new DateTime(2008, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeriodTo = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            Company = "NMC",
                            DoctorId = 1,
                            Location = "SYRIA",
                            PeriodFrom = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Doctor"
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.DoctorSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Days")
                        .HasColumnType("text");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("NMC.Domain.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EmployeeNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("NMC.Domain.Models.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(100L, null, null, null, null, null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Doctor",
                            NameAr = "طبيب"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nurse",
                            NameAr = "ممرض"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Laboratorist",
                            NameAr = "مخبري"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Secretary",
                            NameAr = "سكرتيرة"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Receptionist",
                            NameAr = "موظف استقبال"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Accountant",
                            NameAr = "محاسب"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Administrator",
                            NameAr = "إداري"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Maintenance",
                            NameAr = "صيانة"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Pharmacist",
                            NameAr = "صيدلي"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Cleaner",
                            NameAr = "عامل تنظيف"
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PurchaseFrom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PurchasedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("RoomNo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("NMC.Domain.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AdmissionId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("NMC.Domain.Models.ModuleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Module")
                        .HasColumnType("integer");

                    b.Property<bool>("ReceiveNotification")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ModuleUsers");
                });

            modelBuilder.Entity("NMC.Domain.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("Module")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedId")
                        .HasColumnType("text");

                    b.Property<bool>("Unread")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NMC.Domain.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("Children")
                        .HasColumnType("integer");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("Company")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ExternalID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FatherName")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<bool>("Married")
                        .HasColumnType("boolean");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("MotherName")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("NationalID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("Occupation")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("PassportID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("NMC.Domain.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("money");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("NMC.Domain.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("BedNo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("EndTime")
                        .HasColumnType("text");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GradeId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Requestor")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<int>("ReservedBeds")
                        .HasColumnType("integer");

                    b.Property<string>("RoomNo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("StartTime")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StatusTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomNo");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("NMC.Domain.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<int>("BedCount")
                        .HasColumnType("integer");

                    b.Property<int>("FloorNo")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomGradeId")
                        .HasColumnType("integer");

                    b.Property<string>("RoomNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("WardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomGradeId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("WardId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 1,
                            RoomGradeId = 1,
                            RoomNo = "11",
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            Id = 2,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 1,
                            RoomGradeId = 1,
                            RoomNo = "12",
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            Id = 3,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 1,
                            RoomGradeId = 2,
                            RoomNo = "13",
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            Id = 4,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 1,
                            RoomGradeId = 1,
                            RoomNo = "14",
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            Id = 5,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 1,
                            RoomGradeId = 2,
                            RoomNo = "15",
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            Id = 6,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 1,
                            RoomGradeId = 1,
                            RoomNo = "16",
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            Id = 7,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 1,
                            RoomGradeId = 1,
                            RoomNo = "17",
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            Id = 8,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 1,
                            RoomGradeId = 1,
                            RoomNo = "18",
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            Id = 9,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 1,
                            RoomGradeId = 1,
                            RoomNo = "19",
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            Id = 10,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 2,
                            RoomGradeId = 1,
                            RoomNo = "21",
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            Id = 11,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 2,
                            RoomGradeId = 2,
                            RoomNo = "22",
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            Id = 12,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 2,
                            RoomGradeId = 1,
                            RoomNo = "23",
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            Id = 13,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 2,
                            RoomGradeId = 1,
                            RoomNo = "24",
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            Id = 14,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 2,
                            RoomGradeId = 2,
                            RoomNo = "25",
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            Id = 15,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 2,
                            RoomGradeId = 1,
                            RoomNo = "26",
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            Id = 16,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 2,
                            RoomGradeId = 1,
                            RoomNo = "27",
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            Id = 17,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 2,
                            RoomGradeId = 1,
                            RoomNo = "28",
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            Id = 18,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 2,
                            RoomGradeId = 1,
                            RoomNo = "29",
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            Id = 19,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 3,
                            RoomGradeId = 1,
                            RoomNo = "31",
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            Id = 20,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 3,
                            RoomGradeId = 3,
                            RoomNo = "32",
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            Id = 21,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 3,
                            RoomGradeId = 1,
                            RoomNo = "33",
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            Id = 22,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 3,
                            RoomGradeId = 1,
                            RoomNo = "34",
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            Id = 23,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 3,
                            RoomGradeId = 1,
                            RoomNo = "35",
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            Id = 24,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 3,
                            RoomGradeId = 3,
                            RoomNo = "36",
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            Id = 25,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 3,
                            RoomGradeId = 1,
                            RoomNo = "37",
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            Id = 26,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 3,
                            RoomGradeId = 1,
                            RoomNo = "38",
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            Id = 27,
                            Available = false,
                            BedCount = 1,
                            FloorNo = 3,
                            RoomGradeId = 2,
                            RoomNo = "39",
                            RoomTypeId = 1,
                            WardId = 5
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.RoomGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(100L, null, null, null, null, null);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.HasKey("Id");

                    b.ToTable("RoomGrades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Suite",
                            NameAr = "جناح"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Excellent Class",
                            NameAr = "درجة ممتازة"
                        },
                        new
                        {
                            Id = 3,
                            Name = "First Class",
                            NameAr = "درجة أولى"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Second Class",
                            NameAr = "درجة ثانية"
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(100L, null, null, null, null, null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Patient Room",
                            NameAr = "غرفة مريض"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Emergency Room",
                            NameAr = "غرفة طوارئ"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Care Room",
                            NameAr = "غرفة عناية"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Baby Incubator Room",
                            NameAr = "غرفة حاضنات"
                        });
                });

            modelBuilder.Entity("NMC.Domain.Models.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Unread")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("SBMenu.SBMenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("HRef")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SBMenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Enabled = true,
                            HRef = "/Index",
                            Icon = "fa fa-dashboard",
                            SortKey = 1,
                            Text = "Dashboard",
                            Visible = true
                        },
                        new
                        {
                            Id = 2,
                            Enabled = true,
                            HRef = "/UI1/Doctors/Index",
                            Icon = "fa fa-user-md",
                            SortKey = 2,
                            Text = "Doctors",
                            Visible = true
                        },
                        new
                        {
                            Id = 3,
                            Enabled = true,
                            HRef = "/UI1/Patients/Index",
                            Icon = "fa fa-wheelchair",
                            SortKey = 3,
                            Text = "Patients",
                            Visible = true
                        },
                        new
                        {
                            Id = 4,
                            Enabled = true,
                            HRef = "/UI1/Appointments/Index",
                            Icon = "fa fa-calendar",
                            SortKey = 4,
                            Text = "Appointments",
                            Visible = true
                        },
                        new
                        {
                            Id = 5,
                            Enabled = true,
                            HRef = "/UI1/Doctors/DoctorScheduleIndex",
                            Icon = "fa fa-calendar-check-o",
                            SortKey = 5,
                            Text = "Doctor Schedules",
                            Visible = true
                        },
                        new
                        {
                            Id = 6,
                            Enabled = true,
                            HRef = "/UI1/Departments/Index",
                            Icon = "fa fa-calendar-check-o",
                            SortKey = 6,
                            Text = "Departments",
                            Visible = true
                        },
                        new
                        {
                            Id = 7,
                            Enabled = true,
                            HRef = "/UI1/Rooms/Index",
                            Icon = "fa fa-cube",
                            SortKey = 7,
                            Text = "Rooms",
                            Visible = true
                        },
                        new
                        {
                            Id = 8,
                            Enabled = true,
                            HRef = "/UI1/Reservations/Index",
                            Icon = "fa fa-envelope-o",
                            SortKey = 8,
                            Text = "Reservations",
                            Visible = true
                        },
                        new
                        {
                            Id = 9,
                            Enabled = true,
                            HRef = "/UI1/Admissions/Index",
                            Icon = "fa fa-bed",
                            SortKey = 9,
                            Text = "Admissions",
                            Visible = true
                        },
                        new
                        {
                            Id = 10,
                            Enabled = true,
                            HRef = "#",
                            Icon = "fa fa-user",
                            SortKey = 10,
                            Text = "Employees",
                            Visible = true
                        },
                        new
                        {
                            Id = 11,
                            Enabled = true,
                            HRef = "/UI1/Employees/Index",
                            Icon = "",
                            ParentId = 10,
                            SortKey = 11,
                            Text = "Employee List",
                            Visible = true
                        },
                        new
                        {
                            Id = 12,
                            Enabled = true,
                            HRef = "#",
                            Icon = "",
                            ParentId = 10,
                            SortKey = 12,
                            Text = "Attendance",
                            Visible = true
                        },
                        new
                        {
                            Id = 13,
                            Enabled = true,
                            HRef = "#",
                            Icon = "fa fa-money",
                            SortKey = 13,
                            Text = "Accounts",
                            Visible = true
                        },
                        new
                        {
                            Id = 14,
                            Enabled = true,
                            HRef = "#",
                            Icon = "",
                            ParentId = 13,
                            SortKey = 14,
                            Text = "Invoices",
                            Visible = true
                        },
                        new
                        {
                            Id = 15,
                            Enabled = true,
                            HRef = "#",
                            Icon = "",
                            ParentId = 13,
                            SortKey = 15,
                            Text = "Payments",
                            Visible = true
                        },
                        new
                        {
                            Id = 16,
                            Enabled = true,
                            HRef = "#",
                            Icon = "",
                            ParentId = 13,
                            SortKey = 16,
                            Text = "Expenses",
                            Visible = true
                        },
                        new
                        {
                            Id = 17,
                            Enabled = true,
                            HRef = "#",
                            Icon = "fa fa-cogs",
                            SortKey = 17,
                            Text = "Types",
                            Visible = true
                        },
                        new
                        {
                            Id = 18,
                            Enabled = true,
                            HRef = "/UI1/RoomTypes/Index",
                            Icon = "",
                            ParentId = 17,
                            SortKey = 18,
                            Text = "Room Types",
                            Visible = true
                        },
                        new
                        {
                            Id = 19,
                            Enabled = true,
                            HRef = "/UI1/RoomGrades/Index",
                            Icon = "",
                            ParentId = 17,
                            SortKey = 19,
                            Text = "Room Grades",
                            Visible = true
                        },
                        new
                        {
                            Id = 20,
                            Enabled = true,
                            HRef = "/UI1/AppointmentTypes/Index",
                            Icon = "",
                            ParentId = 17,
                            SortKey = 20,
                            Text = "Appointment Types",
                            Visible = true
                        },
                        new
                        {
                            Id = 21,
                            Enabled = true,
                            HRef = "/UI1/AdmissionTypes/Index",
                            Icon = "",
                            ParentId = 17,
                            SortKey = 21,
                            Text = "Admission Types",
                            Visible = true
                        },
                        new
                        {
                            Id = 22,
                            Enabled = true,
                            HRef = "/UI1/DischargeTypes/Index",
                            Icon = "",
                            ParentId = 17,
                            SortKey = 22,
                            Text = "Discharge Types",
                            Visible = true
                        },
                        new
                        {
                            Id = 23,
                            Enabled = true,
                            HRef = "/UI1/EmployeeTypes/Index",
                            Icon = "",
                            ParentId = 17,
                            SortKey = 23,
                            Text = "Employee Types",
                            Visible = true
                        },
                        new
                        {
                            Id = 24,
                            Enabled = true,
                            HRef = "#",
                            Icon = "fa fa-flag-o",
                            SortKey = 24,
                            Text = "Reports",
                            Visible = true
                        },
                        new
                        {
                            Id = 25,
                            Enabled = true,
                            HRef = "#",
                            Icon = "",
                            ParentId = 24,
                            SortKey = 25,
                            Text = "Report 1",
                            Visible = true
                        },
                        new
                        {
                            Id = 26,
                            Enabled = true,
                            HRef = "#",
                            Icon = "",
                            ParentId = 26,
                            SortKey = 25,
                            Text = "Report 2",
                            Visible = true
                        },
                        new
                        {
                            Id = 27,
                            Enabled = true,
                            HRef = "#",
                            Icon = "fa fa-cog",
                            SortKey = 27,
                            Text = "Settings",
                            Visible = true
                        },
                        new
                        {
                            Id = 28,
                            Enabled = true,
                            HRef = "/UI1/Admissions/Index",
                            Icon = "fa fa-bed",
                            SortKey = 28,
                            Text = "Inpatients",
                            Visible = true
                        },
                        new
                        {
                            Id = 29,
                            Enabled = true,
                            HRef = "/UI1/Reservations/Index",
                            Icon = "fa fa-envelope-o",
                            SortKey = 29,
                            Text = "Bookings",
                            Visible = true
                        },
                        new
                        {
                            Id = 30,
                            Enabled = true,
                            HRef = "/UI1/Doctors/Index",
                            Icon = "fa fa-user-md",
                            SortKey = 30,
                            Text = "Doctors",
                            Visible = true
                        },
                        new
                        {
                            Id = 31,
                            Enabled = true,
                            HRef = "/UI1/Admissions/Index",
                            Icon = "fa fa-bed",
                            SortKey = 31,
                            Text = "Inpatients",
                            Visible = true
                        },
                        new
                        {
                            Id = 32,
                            Enabled = true,
                            HRef = "/UI1/Reservations/Index",
                            Icon = "fa fa-envelope-o",
                            SortKey = 32,
                            Text = "Bookings",
                            Visible = true
                        });
                });

            modelBuilder.Entity("SBMenu.SBMenuSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SBMenuSections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Role = "Admin",
                            SortKey = 1,
                            Text = "Main"
                        },
                        new
                        {
                            Id = 2,
                            Role = "Admission",
                            SortKey = 2,
                            Text = "Admission"
                        },
                        new
                        {
                            Id = 3,
                            Role = "Doctor",
                            SortKey = 3,
                            Text = "Doctor"
                        });
                });

            modelBuilder.Entity("SBMenu.SBMenuSectionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("MenuItemId")
                        .HasColumnType("integer");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("SectionId");

                    b.ToTable("SBMenuSectionItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MenuItemId = 1,
                            SectionId = 1,
                            SortKey = 1
                        },
                        new
                        {
                            Id = 2,
                            MenuItemId = 2,
                            SectionId = 1,
                            SortKey = 2
                        },
                        new
                        {
                            Id = 3,
                            MenuItemId = 3,
                            SectionId = 1,
                            SortKey = 3
                        },
                        new
                        {
                            Id = 4,
                            MenuItemId = 4,
                            SectionId = 1,
                            SortKey = 4
                        },
                        new
                        {
                            Id = 5,
                            MenuItemId = 5,
                            SectionId = 1,
                            SortKey = 5
                        },
                        new
                        {
                            Id = 6,
                            MenuItemId = 6,
                            SectionId = 1,
                            SortKey = 6
                        },
                        new
                        {
                            Id = 7,
                            MenuItemId = 7,
                            SectionId = 1,
                            SortKey = 7
                        },
                        new
                        {
                            Id = 8,
                            MenuItemId = 8,
                            SectionId = 1,
                            SortKey = 8
                        },
                        new
                        {
                            Id = 9,
                            MenuItemId = 9,
                            SectionId = 1,
                            SortKey = 9
                        },
                        new
                        {
                            Id = 10,
                            MenuItemId = 10,
                            SectionId = 1,
                            SortKey = 10
                        },
                        new
                        {
                            Id = 11,
                            MenuItemId = 13,
                            SectionId = 1,
                            SortKey = 11
                        },
                        new
                        {
                            Id = 12,
                            MenuItemId = 17,
                            SectionId = 1,
                            SortKey = 12
                        },
                        new
                        {
                            Id = 13,
                            MenuItemId = 24,
                            SectionId = 1,
                            SortKey = 13
                        },
                        new
                        {
                            Id = 14,
                            MenuItemId = 27,
                            SectionId = 1,
                            SortKey = 14
                        },
                        new
                        {
                            Id = 15,
                            MenuItemId = 28,
                            SectionId = 2,
                            SortKey = 15
                        },
                        new
                        {
                            Id = 16,
                            MenuItemId = 29,
                            SectionId = 2,
                            SortKey = 16
                        },
                        new
                        {
                            Id = 17,
                            MenuItemId = 30,
                            SectionId = 2,
                            SortKey = 17
                        },
                        new
                        {
                            Id = 33,
                            MenuItemId = 31,
                            SectionId = 3,
                            SortKey = 33
                        },
                        new
                        {
                            Id = 34,
                            MenuItemId = 32,
                            SectionId = 3,
                            SortKey = 34
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("NMC.Core.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("NMC.Core.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("NMC.Core.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("NMC.Core.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Core.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("NMC.Core.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NMC.Domain.Models.Admission", b =>
                {
                    b.HasOne("NMC.Domain.Models.AdmissionType", "AdmissionType")
                        .WithMany()
                        .HasForeignKey("AdmissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Domain.Models.DischargeType", "DischargeType")
                        .WithMany()
                        .HasForeignKey("DischargeTypeId");

                    b.HasOne("NMC.Domain.Models.Patient", "Patient")
                        .WithMany("Admissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Domain.Models.Doctor", "ReferrerDoctor")
                        .WithMany()
                        .HasForeignKey("ReferrerDoctorId");

                    b.HasOne("NMC.Domain.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId");

                    b.Navigation("AdmissionType");

                    b.Navigation("Department");

                    b.Navigation("DischargeType");

                    b.Navigation("Patient");

                    b.Navigation("ReferrerDoctor");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("NMC.Domain.Models.Appointment", b =>
                {
                    b.HasOne("NMC.Domain.Models.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Domain.Models.Department", "Department")
                        .WithMany("Appointments")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("NMC.Domain.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("NMC.Domain.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("NMC.Domain.Models.Attendance", b =>
                {
                    b.HasOne("NMC.Domain.Models.Employee", "Employee")
                        .WithMany("AttendanceSheets")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("NMC.Domain.Models.DepartmentDoctor", b =>
                {
                    b.HasOne("NMC.Domain.Models.Department", "Department")
                        .WithMany("DepartmentDoctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Domain.Models.Doctor", "Doctor")
                        .WithMany("DepartmentDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("NMC.Domain.Models.DepartmentRoom", b =>
                {
                    b.HasOne("NMC.Domain.Models.Department", "Department")
                        .WithMany("DepartmentRooms")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Domain.Models.Room", "Room")
                        .WithMany("DepartmentRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("NMC.Domain.Models.DoctorEducation", b =>
                {
                    b.HasOne("NMC.Domain.Models.Doctor", "Doctor")
                        .WithMany("EducationDetails")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("NMC.Domain.Models.DoctorExperience", b =>
                {
                    b.HasOne("NMC.Domain.Models.Doctor", "Doctor")
                        .WithMany("ExperienceDetails")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("NMC.Domain.Models.DoctorSchedule", b =>
                {
                    b.HasOne("NMC.Domain.Models.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("NMC.Domain.Models.Employee", b =>
                {
                    b.HasOne("NMC.Domain.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Domain.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("NMC.Domain.Models.Expense", b =>
                {
                    b.HasOne("NMC.Domain.Models.Invoice", "Invoice")
                        .WithMany("ExpenseItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("NMC.Domain.Models.Invoice", b =>
                {
                    b.HasOne("NMC.Domain.Models.Admission", "Admission")
                        .WithMany("Invoices")
                        .HasForeignKey("AdmissionId");

                    b.HasOne("NMC.Domain.Models.Reservation", "Reservation")
                        .WithMany("Invoices")
                        .HasForeignKey("ReservationId");

                    b.Navigation("Admission");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("NMC.Domain.Models.Payment", b =>
                {
                    b.HasOne("NMC.Domain.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("NMC.Domain.Models.Reservation", b =>
                {
                    b.HasOne("NMC.Domain.Models.RoomGrade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("NMC.Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("NMC.Domain.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomNo")
                        .HasPrincipalKey("RoomNo");

                    b.Navigation("Grade");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("NMC.Domain.Models.Room", b =>
                {
                    b.HasOne("NMC.Domain.Models.RoomGrade", "RoomGrade")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomGradeId");

                    b.HasOne("NMC.Domain.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Domain.Models.Department", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");

                    b.Navigation("RoomGrade");

                    b.Navigation("RoomType");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("NMC.Domain.Models.UserNotification", b =>
                {
                    b.HasOne("NMC.Domain.Models.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("SBMenu.SBMenuItem", b =>
                {
                    b.HasOne("SBMenu.SBMenuItem", "Parent")
                        .WithMany("Items")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SBMenu.SBMenuSectionItem", b =>
                {
                    b.HasOne("SBMenu.SBMenuItem", "MenuItem")
                        .WithMany("SectionItems")
                        .HasForeignKey("MenuItemId");

                    b.HasOne("SBMenu.SBMenuSection", "Section")
                        .WithMany("SectionItems")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("NMC.Domain.Models.Admission", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("NMC.Domain.Models.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("NMC.Domain.Models.Department", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DepartmentDoctors");

                    b.Navigation("DepartmentRooms");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("NMC.Domain.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DepartmentDoctors");

                    b.Navigation("EducationDetails");

                    b.Navigation("ExperienceDetails");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("NMC.Domain.Models.Employee", b =>
                {
                    b.Navigation("AttendanceSheets");
                });

            modelBuilder.Entity("NMC.Domain.Models.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("NMC.Domain.Models.Invoice", b =>
                {
                    b.Navigation("ExpenseItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("NMC.Domain.Models.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("NMC.Domain.Models.Patient", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("NMC.Domain.Models.Reservation", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("NMC.Domain.Models.Room", b =>
                {
                    b.Navigation("DepartmentRooms");
                });

            modelBuilder.Entity("NMC.Domain.Models.RoomGrade", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("NMC.Domain.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("SBMenu.SBMenuItem", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SectionItems");
                });

            modelBuilder.Entity("SBMenu.SBMenuSection", b =>
                {
                    b.Navigation("SectionItems");
                });
#pragma warning restore 612, 618
        }
    }
}
