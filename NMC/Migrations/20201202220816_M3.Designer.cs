// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NMC.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NMC.Migrations
{
    [DbContext(typeof(MedContext))]
    [Migration("20201202220816_M3")]
    partial class M3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "b24f0228-9ae8-4263-8686-8c0075e6569c"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "82e3f6ad-c780-4d51-bab5-1f003257aece"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "a51de5bf-cc8a-474c-b332-241da3dd08e2"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "fdef25cb-6284-4598-9732-f050f5745d7b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b24f0228-9ae8-4263-8686-8c0075e6569c",
                            RoleId = "ADMIN"
                        },
                        new
                        {
                            UserId = "82e3f6ad-c780-4d51-bab5-1f003257aece",
                            RoleId = "FD"
                        },
                        new
                        {
                            UserId = "a51de5bf-cc8a-474c-b332-241da3dd08e2",
                            RoleId = "ACT"
                        },
                        new
                        {
                            UserId = "fdef25cb-6284-4598-9732-f050f5745d7b",
                            RoleId = "MGT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("NMC.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "7b676a2c-e579-4a02-a0a9-64cb1c36d2aa",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "DOCTOR",
                            ConcurrencyStamp = "2614c86c-ede7-4c08-bc1d-5e8aa702400b",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "FD",
                            ConcurrencyStamp = "f794d6a1-b85e-4f66-bb0f-14ce67339780",
                            Name = "Front Desk",
                            NormalizedName = "FRONT DESK"
                        },
                        new
                        {
                            Id = "LABD",
                            ConcurrencyStamp = "5183416b-8a8d-4ed3-adf5-c602f4b718d7",
                            Name = "Laboratory Doctor",
                            NormalizedName = "LABORATORY DOCTOR"
                        },
                        new
                        {
                            Id = "LABT",
                            ConcurrencyStamp = "e19d262a-1264-483c-9b6f-3aab3d910eec",
                            Name = "Laboratory Technician",
                            NormalizedName = "LABORATORY TECHNICIAN"
                        },
                        new
                        {
                            Id = "ACT",
                            ConcurrencyStamp = "3a3d16ce-6333-4419-9487-03a06da89c02",
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = "MGT",
                            ConcurrencyStamp = "d4a1863a-b4a4-4f69-b29a-16c4800469ef",
                            Name = "Management",
                            NormalizedName = "MANAGEMENT"
                        });
                });

            modelBuilder.Entity("NMC.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName")
                        .HasName("AK_Username");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "b24f0228-9ae8-4263-8686-8c0075e6569c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8508279-366c-485e-abb8-e172e2afe8c2",
                            Email = "admin@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPTB/bGCF0GqiDRLHStKfnP9GrwxQvuly0b9GPMQ7pSD7CCmQizEvpl3YJs4calShA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4550b461-25a8-49b1-8c6c-b43c2eb491f1",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "82e3f6ad-c780-4d51-bab5-1f003257aece",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "424cca19-984d-48a1-97ae-27d02e816271",
                            Email = "fd@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FD@LOCALHOST",
                            NormalizedUserName = "FD",
                            PasswordHash = "AQAAAAEAACcQAAAAEF8JniAP6rfi91Yb0UjKhX5qav9s3OkT/1NPQ/5w9d9bnhYe6p54Il/rJAvgf0KtKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "151a4318-e2af-4556-9509-f28ea3fa3e9d",
                            TwoFactorEnabled = false,
                            UserName = "fd"
                        },
                        new
                        {
                            Id = "a51de5bf-cc8a-474c-b332-241da3dd08e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b8d8e9d-9d60-426d-91c1-0e3ab4fc62d0",
                            Email = "act@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACT@LOCALHOST",
                            NormalizedUserName = "ACT",
                            PasswordHash = "AQAAAAEAACcQAAAAEM9rtyTJv/X5mOt4kMktT13NWDtXZHRbXDkP7LRobhQASvzQLXUZu/DfS1/urBnCEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00e125c1-630f-4cd4-9853-0f212f89d6d1",
                            TwoFactorEnabled = false,
                            UserName = "act"
                        },
                        new
                        {
                            Id = "fdef25cb-6284-4598-9732-f050f5745d7b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49f3e79c-bfe7-4504-8d1e-714ab5b91d54",
                            Email = "mgt@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MGT@LOCALHOST",
                            NormalizedUserName = "MGT",
                            PasswordHash = "AQAAAAEAACcQAAAAEOW/MRg2xtq43sjsJvWu5tOilyZLFvBr5u3Ljk/NAfdeXZm7PSBQfc+nhGRH8KXeRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ca97d23-de80-4a17-b76a-c3ca2bfb23f8",
                            TwoFactorEnabled = false,
                            UserName = "mgt"
                        });
                });

            modelBuilder.Entity("NMC.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNameAlt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parties");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Party");
                });

            modelBuilder.Entity("NMC.Models.PartyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("PartyContact");
                });

            modelBuilder.Entity("NMC.Models.PartyIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("PartyIdentifier");
                });

            modelBuilder.Entity("NMC.Models.PartyRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleTypeId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Thru")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("RoleTypeId");

                    b.ToTable("PartyRoles");
                });

            modelBuilder.Entity("NMC.Models.RoleType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleTypes");

                    b.HasData(
                        new
                        {
                            Id = "DEPT",
                            Name = "Department"
                        },
                        new
                        {
                            Id = "DOCTOR",
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = "IN-PATIENT",
                            Name = "In-Patient"
                        },
                        new
                        {
                            Id = "OUT-PATIENT",
                            Name = "Out-Patient"
                        },
                        new
                        {
                            Id = "EMP",
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("NMC.Models.Organization", b =>
                {
                    b.HasBaseType("NMC.Models.Party");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormal")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("NMC.Models.Person", b =>
                {
                    b.HasBaseType("NMC.Models.Party");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FatherNameAlt")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FirstNameAlt")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LastNameAlt")
                        .HasColumnType("text");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("MotherName")
                        .HasColumnType("text");

                    b.Property<string>("MotherNameAlt")
                        .HasColumnType("text");

                    b.Property<int>("NumOfDependents")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NMC.Models.PartyContact", b =>
                {
                    b.HasOne("NMC.Models.Party", "Party")
                        .WithMany("Contacts")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("NMC.Models.PartyIdentifier", b =>
                {
                    b.HasOne("NMC.Models.Party", "Party")
                        .WithMany("Identifiers")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("NMC.Models.PartyRole", b =>
                {
                    b.HasOne("NMC.Models.Party", "Party")
                        .WithMany("Roles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.RoleType", "RoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeId");

                    b.Navigation("Party");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("NMC.Models.Party", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Identifiers");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
