// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NMC.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NMC.Migrations
{
    [DbContext(typeof(MedContext))]
    [Migration("20201206151659_M4")]
    partial class M4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "708438e0-7901-4c5b-acb5-099ba1291f1c",
                            RoleId = "Administration"
                        },
                        new
                        {
                            UserId = "623996ed-beb4-46aa-b77a-222b09002157",
                            RoleId = "Admission"
                        },
                        new
                        {
                            UserId = "65753b5f-86fa-4249-9fe3-c92715457f0f",
                            RoleId = "Reception"
                        },
                        new
                        {
                            UserId = "a7585c6a-13d8-471b-8f35-457d8c0765b1",
                            RoleId = "Laboratory"
                        },
                        new
                        {
                            UserId = "5fbdd3ae-8f9a-47b7-9492-b4b67c8dca13",
                            RoleId = "Laboratory"
                        },
                        new
                        {
                            UserId = "5fbdd3ae-8f9a-47b7-9492-b4b67c8dca13",
                            RoleId = "Doctor"
                        },
                        new
                        {
                            UserId = "2d001c2b-2492-4084-9985-3cd200619df1",
                            RoleId = "Management"
                        },
                        new
                        {
                            UserId = "984b6162-8ad4-48e7-8367-d313a0dfcfe0",
                            RoleId = "Management"
                        },
                        new
                        {
                            UserId = "984b6162-8ad4-48e7-8367-d313a0dfcfe0",
                            RoleId = "Doctor"
                        },
                        new
                        {
                            UserId = "cfadd3f4-6619-4d62-9dd9-6912b68ba25e",
                            RoleId = "Accounting"
                        },
                        new
                        {
                            UserId = "52ed9b9a-e54b-4de7-9fe0-04e0bcc7c732",
                            RoleId = "Doctor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("NMC.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "Administration",
                            ConcurrencyStamp = "05cd24f9-12cb-49b6-a8dc-01d508b6a443",
                            Name = "Administration",
                            NormalizedName = "Administration"
                        },
                        new
                        {
                            Id = "Admission",
                            ConcurrencyStamp = "fd18b843-4333-4dfa-acff-aad25fb80828",
                            Name = "Admission",
                            NormalizedName = "Admission"
                        },
                        new
                        {
                            Id = "Reception",
                            ConcurrencyStamp = "af4610a0-efbf-4f16-8146-fbd335d2bf52",
                            Name = "Reception",
                            NormalizedName = "Reception"
                        },
                        new
                        {
                            Id = "Accounting",
                            ConcurrencyStamp = "7876f648-af33-4a2e-94a0-883a29397e1d",
                            Name = "Accounting",
                            NormalizedName = "Accounting"
                        },
                        new
                        {
                            Id = "Doctor",
                            ConcurrencyStamp = "6c18262a-aafd-4458-b807-f881cad27ab7",
                            Name = "Doctor",
                            NormalizedName = "Doctor"
                        },
                        new
                        {
                            Id = "Laboratory",
                            ConcurrencyStamp = "fce778ed-6738-43c9-805a-f62f7b6e7672",
                            Name = "Laboratory",
                            NormalizedName = "Laboratory"
                        },
                        new
                        {
                            Id = "Management",
                            ConcurrencyStamp = "fbc9c3b5-8ea0-4162-8537-2b566aab1589",
                            Name = "Management",
                            NormalizedName = "Management"
                        });
                });

            modelBuilder.Entity("NMC.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName")
                        .HasName("AK_Username");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "708438e0-7901-4c5b-acb5-099ba1291f1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "241cc58d-caa9-472c-8bba-ff7cbc27c13e",
                            Email = "admin@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFKMgukW4ZMUUDBgCCKpHi6gWm3cWnDkIXCZncudyTLH767cVRpw40u3/YT7T+2TvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed1f3e31-15c3-4b11-8288-4c930cf98ebd",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "623996ed-beb4-46aa-b77a-222b09002157",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f817649c-d5af-4262-88ea-bbb39261fc0d",
                            Email = "admission@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMISSION@HOSPITAL",
                            NormalizedUserName = "ADMISSION",
                            PasswordHash = "AQAAAAEAACcQAAAAEGAJvYvwE76DphYycdKKq7cEReAJB29V34BJ3F6WkTBY/aU+wROTLUwgrdi6xwYDvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80041790-0133-494d-9526-73bf3f8bba27",
                            TwoFactorEnabled = false,
                            UserName = "admission"
                        },
                        new
                        {
                            Id = "65753b5f-86fa-4249-9fe3-c92715457f0f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f6fc97e-3635-4f43-a583-0c3cddb61c1d",
                            Email = "reception@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RECEPTION@HOSPITAL",
                            NormalizedUserName = "RECEPTION",
                            PasswordHash = "AQAAAAEAACcQAAAAEBUQqBXLjZ/BnFoQGdEtsZNt6RQA1gDMglsfSw4C4oWy/vTcm1DV7DMIcU+PxdJJzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2723ed2c-64fc-401c-8969-8a0ecdca1a92",
                            TwoFactorEnabled = false,
                            UserName = "reception"
                        },
                        new
                        {
                            Id = "a7585c6a-13d8-471b-8f35-457d8c0765b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8671c9e1-8885-4032-96ea-b2cb0545af61",
                            Email = "lab@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LAB@HOSPITAL",
                            NormalizedUserName = "LAB",
                            PasswordHash = "AQAAAAEAACcQAAAAEMnOfy/1dQmxLZQK6HWBu4D1JKjC5+KoyvxMJpHuSeL8TtRBZmfCPW+YrzQbkKgaGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c2ea19d-0c8e-4915-bc38-d4f661fae261",
                            TwoFactorEnabled = false,
                            UserName = "lab"
                        },
                        new
                        {
                            Id = "5fbdd3ae-8f9a-47b7-9492-b4b67c8dca13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "592c29ea-bfca-4c3f-99a0-6f94d9145ca3",
                            Email = "labdoctor@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LABDOCTOR@HOSPITAL",
                            NormalizedUserName = "LABDOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEL4jtzXwgiguCLG1LutModvEMKREvby6UNTA9wkj2uaBUL+5rCO6AOZytjFkMr4+Jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8748cf2e-51b6-45e0-84d0-f87e5bdb3328",
                            TwoFactorEnabled = false,
                            UserName = "labdoctor"
                        },
                        new
                        {
                            Id = "2d001c2b-2492-4084-9985-3cd200619df1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e1c0818-f8b6-4577-88fe-c080e7e19f29",
                            Email = "management@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGEMENT@HOSPITAL",
                            NormalizedUserName = "MANAGEMENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEDZXOCng+DI43PBwertVoUKDl/kW53P067KNAljCaQEjuUR2UhYfngz2R1dpGsvvOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2cce605f-3743-484e-856c-cbf431d84852",
                            TwoFactorEnabled = false,
                            UserName = "management"
                        },
                        new
                        {
                            Id = "984b6162-8ad4-48e7-8367-d313a0dfcfe0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49da5ae2-3007-4f00-bbc3-99546adae37d",
                            Email = "managerdoctor@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGERDOCTOR@HOSPITAL",
                            NormalizedUserName = "MANAGERDOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEL6aheEyqA0jfRGGMMGl639Xslbrd6YObOuzRp3z2fT1nOPKDgONmBhlVIrtirEOHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee181c68-ade7-41dd-b527-86cecca4779e",
                            TwoFactorEnabled = false,
                            UserName = "managerdoctor"
                        },
                        new
                        {
                            Id = "cfadd3f4-6619-4d62-9dd9-6912b68ba25e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a06100e-27b3-43dd-89a0-850c7a222e23",
                            Email = "accountant@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNTANT@HOSPITAL",
                            NormalizedUserName = "ACCOUNTANT",
                            PasswordHash = "AQAAAAEAACcQAAAAEISQfWZsgi1nchHL0kwxqUQ+aqf5/btxVhKAb6bkOBWU5GkpExWPqz4L/DUyHX1JPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3d21836-49b6-4d42-8d6c-0886e7d9964f",
                            TwoFactorEnabled = false,
                            UserName = "accountant"
                        },
                        new
                        {
                            Id = "52ed9b9a-e54b-4de7-9fe0-04e0bcc7c732",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0602ec25-1bde-43b8-84c1-de3cec57afa7",
                            Email = "doctor@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEI1W45XTtwm36AWlHsUUhoQ1cGsTtEztkvBjSOaddN3EJYD3UHocNKEcgo45BXEIRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4ef07d8-688b-4f02-9736-382e9dc20ed0",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
