// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NMC.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NMC.Migrations
{
    [DbContext(typeof(MedContext))]
    [Migration("20201206132927_M2")]
    partial class M2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "c2438c5e-bc02-44ae-b016-b3a34167875c",
                            RoleId = "Administration"
                        },
                        new
                        {
                            UserId = "395a4a46-912b-4e88-a1bb-86029cd287ad",
                            RoleId = "Admission"
                        },
                        new
                        {
                            UserId = "b580b4f4-0234-4a21-a46c-fc5258476a6b",
                            RoleId = "Reception"
                        },
                        new
                        {
                            UserId = "2eab18c7-40b8-4a4e-abf1-d2c12713682d",
                            RoleId = "Laboratory"
                        },
                        new
                        {
                            UserId = "3fcc579e-f709-4d4c-ba9f-96bcef6c2ae9",
                            RoleId = "Laboratory"
                        },
                        new
                        {
                            UserId = "3fcc579e-f709-4d4c-ba9f-96bcef6c2ae9",
                            RoleId = "Doctor"
                        },
                        new
                        {
                            UserId = "51e1bf75-3b3c-4145-898f-372fa01a562b",
                            RoleId = "Management"
                        },
                        new
                        {
                            UserId = "a400f105-3a20-46f9-9ac6-aa38dc9be9fe",
                            RoleId = "Management"
                        },
                        new
                        {
                            UserId = "a400f105-3a20-46f9-9ac6-aa38dc9be9fe",
                            RoleId = "Doctor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("NMC.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "Administration",
                            ConcurrencyStamp = "ad321268-58a3-4549-ab12-ad39e29dc2a1",
                            Name = "Administration",
                            NormalizedName = "Administration"
                        },
                        new
                        {
                            Id = "Admission",
                            ConcurrencyStamp = "d1a9b44f-a4fd-422e-9816-7b4553780c63",
                            Name = "Admission",
                            NormalizedName = "Admission"
                        },
                        new
                        {
                            Id = "Reception",
                            ConcurrencyStamp = "64b45286-9f4c-40b0-83f3-38e3bd21c54e",
                            Name = "Reception",
                            NormalizedName = "Reception"
                        },
                        new
                        {
                            Id = "Doctor",
                            ConcurrencyStamp = "6ea2d4db-dc2e-43c0-a950-f9514be30877",
                            Name = "Doctor",
                            NormalizedName = "Doctor"
                        },
                        new
                        {
                            Id = "Laboratory",
                            ConcurrencyStamp = "8b4c8f63-b349-46b7-8ebc-1da032013ab0",
                            Name = "Laboratory",
                            NormalizedName = "Laboratory"
                        },
                        new
                        {
                            Id = "Management",
                            ConcurrencyStamp = "6439c6be-8987-44fa-9de8-c5d4aece2f20",
                            Name = "Management",
                            NormalizedName = "Management"
                        });
                });

            modelBuilder.Entity("NMC.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName")
                        .HasName("AK_Username");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "c2438c5e-bc02-44ae-b016-b3a34167875c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8249f9c3-3c24-4b7d-85c9-229c7c8bcce7",
                            Email = "admin@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECDebHv8SDXUT+V4Z5eIrKs6zJSTQOyPacOamt8No5Iz4SpxqB6iIqnBbogaSfR+YQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1b71df4-6a7f-4e24-8436-15dbb11bffee",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "395a4a46-912b-4e88-a1bb-86029cd287ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da524568-e99e-4b2e-88ce-561d645b1928",
                            Email = "admission@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMISSION@HOSPITAL",
                            NormalizedUserName = "ADMISSION",
                            PasswordHash = "AQAAAAEAACcQAAAAEMkMaThNwbU/2kCF4GOQ2YWt6iH/d+AT/OGoExV7nMXUX/RWAc9TKGYKFJiMYk4Bfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bcd1459-f8f1-46c3-9d7b-dd9a7a7dccb1",
                            TwoFactorEnabled = false,
                            UserName = "admission"
                        },
                        new
                        {
                            Id = "b580b4f4-0234-4a21-a46c-fc5258476a6b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "875629ad-d724-463f-a7ed-a808feba8726",
                            Email = "reception@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RECEPTION@HOSPITAL",
                            NormalizedUserName = "RECEPTION",
                            PasswordHash = "AQAAAAEAACcQAAAAEO1FqN/ga6Rcd36zJfGwCrV2AW3AOxRUuHRSFNd3IMuYo8ykIlctJDMGtYbtbF1g7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2c162db-7c17-4a6a-8cac-aa70290fc548",
                            TwoFactorEnabled = false,
                            UserName = "reception"
                        },
                        new
                        {
                            Id = "2eab18c7-40b8-4a4e-abf1-d2c12713682d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1315bbe-27b8-4f68-8bfa-aa81c4ba8cdd",
                            Email = "lab@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LAB@HOSPITAL",
                            NormalizedUserName = "LAB",
                            PasswordHash = "AQAAAAEAACcQAAAAEJn+umHPJCZoIJdLmK4410pv+ZyUPWsXoaW03i2BabjDigOxQ8Z4hjiSIaRAXv5/7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "322959c4-1fae-41ed-9c40-18f528c09bb1",
                            TwoFactorEnabled = false,
                            UserName = "lab"
                        },
                        new
                        {
                            Id = "3fcc579e-f709-4d4c-ba9f-96bcef6c2ae9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f73a0f3-a290-4116-9841-979d42eeeb2d",
                            Email = "labdoctor@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LABDOCTOR@HOSPITAL",
                            NormalizedUserName = "LABDOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEBQ6Kkw8oaYpTuv0wEKMwZzTd1NbmZDgHUBfsQax/TyyAYQmtlDsQJoZj3sfAeLoCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "259cdaee-e1f1-4838-a3b4-6642573c6d0b",
                            TwoFactorEnabled = false,
                            UserName = "labdoctor"
                        },
                        new
                        {
                            Id = "51e1bf75-3b3c-4145-898f-372fa01a562b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86ff2b2d-f888-4e9b-9846-92383f20cf11",
                            Email = "management@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGEMENT@HOSPITAL",
                            NormalizedUserName = "MANAGEMENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEHSqJpJuCHFsQEWpB3NY0yAx0MSJumhGFA9265HaO8SuHH6RrEe/ptasQn4EHmLrtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68a9f4b7-4947-4561-8173-7dde0de0c8b2",
                            TwoFactorEnabled = false,
                            UserName = "management"
                        },
                        new
                        {
                            Id = "a400f105-3a20-46f9-9ac6-aa38dc9be9fe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a077a142-3698-4ba1-aca4-f5d085725b06",
                            Email = "managerdoctor@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGERDOCTOR@HOSPITAL",
                            NormalizedUserName = "MANAGERDOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEM5h4wynQ8jT31cH16AaeZnSWRy2Y5MEmhUM5T94NwA+0LH5t+fev9ZCIJJxNGSqKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8da02fad-fa59-4748-a924-f354d8241886",
                            TwoFactorEnabled = false,
                            UserName = "managerdoctor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
