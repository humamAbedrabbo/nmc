// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NMC.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NMC.Migrations
{
    [DbContext(typeof(MedContext))]
    [Migration("20201201215040_M3")]
    partial class M3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "37988cc0-4e95-4d2d-95fe-868a02f340d0"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "aaeaaa27-0e58-4b56-bd87-6731cd1a3180"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "3185f5ed-b6d6-4d20-acec-79bfb188c972"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "d80a9d06-3cd3-41d2-80ef-04aa5e71131c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "37988cc0-4e95-4d2d-95fe-868a02f340d0",
                            RoleId = "ADMIN"
                        },
                        new
                        {
                            UserId = "aaeaaa27-0e58-4b56-bd87-6731cd1a3180",
                            RoleId = "FD"
                        },
                        new
                        {
                            UserId = "3185f5ed-b6d6-4d20-acec-79bfb188c972",
                            RoleId = "ACT"
                        },
                        new
                        {
                            UserId = "d80a9d06-3cd3-41d2-80ef-04aa5e71131c",
                            RoleId = "MGT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("NMC.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "4b8d1594-fd16-450f-998a-e292708b85a5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "DOCTOR",
                            ConcurrencyStamp = "8262d9d2-ee9a-4784-9a30-6b18d689dd3b",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "FD",
                            ConcurrencyStamp = "5dcddded-f173-45a8-9252-42814de8e825",
                            Name = "Front Desk",
                            NormalizedName = "FRONT DESK"
                        },
                        new
                        {
                            Id = "LABD",
                            ConcurrencyStamp = "782e1de2-8cfb-4581-8a8e-2ff66aac3b6d",
                            Name = "Laboratory Doctor",
                            NormalizedName = "LABORATORY DOCTOR"
                        },
                        new
                        {
                            Id = "LABT",
                            ConcurrencyStamp = "5c7c7a2e-6b71-4ff7-b6c4-6f21b76d189f",
                            Name = "Laboratory Technician",
                            NormalizedName = "LABORATORY TECHNICIAN"
                        },
                        new
                        {
                            Id = "ACT",
                            ConcurrencyStamp = "76528703-0338-4530-b4ee-03e516a887e0",
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = "MGT",
                            ConcurrencyStamp = "83935821-9830-4b87-a05f-2b2d9e8ff5c8",
                            Name = "Management",
                            NormalizedName = "MANAGEMENT"
                        });
                });

            modelBuilder.Entity("NMC.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName")
                        .HasName("AK_Username");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "37988cc0-4e95-4d2d-95fe-868a02f340d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "563fbecc-1536-4d61-b515-e5722810b07a",
                            Email = "admin@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEE+opIYw4LB22xmgzVGirBZ+9/Nbv4Hj2/qVIlM18WcDIHzafPUqJGjCL8sFJwYkEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eac4bd1a-2968-446b-a371-9805a04e0674",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "aaeaaa27-0e58-4b56-bd87-6731cd1a3180",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05cbe6bb-0cb0-4fe0-a178-d627efabe21b",
                            Email = "fd@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FD@LOCALHOST",
                            NormalizedUserName = "FD",
                            PasswordHash = "AQAAAAEAACcQAAAAEH88cZPjjrycfm0iWE+4KF9YXJNk0ts42ixID3k10BOkiW30gaAgBYvZYQtxaIwdDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20b6a684-6f2a-4f1f-8d52-c47007c14c2c",
                            TwoFactorEnabled = false,
                            UserName = "fd"
                        },
                        new
                        {
                            Id = "3185f5ed-b6d6-4d20-acec-79bfb188c972",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "884fb419-b98e-426e-9074-932aa2169e7e",
                            Email = "act@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACT@LOCALHOST",
                            NormalizedUserName = "ACT",
                            PasswordHash = "AQAAAAEAACcQAAAAEFjqAe/0z6mmcnziKGlIi9sUk/RD3A9p0YvAI27IQls8qcz2tb3iQNj5qbkpVTBgeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83512b17-848e-4315-8ffa-96c0ec8f3e40",
                            TwoFactorEnabled = false,
                            UserName = "act"
                        },
                        new
                        {
                            Id = "d80a9d06-3cd3-41d2-80ef-04aa5e71131c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "174bdf24-ab47-4dc0-afca-26a9682862ba",
                            Email = "mgt@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MGT@LOCALHOST",
                            NormalizedUserName = "MGT",
                            PasswordHash = "AQAAAAEAACcQAAAAEHO61bnMNcXVxB3HGrHystrxWBV/3CF51KdBmn9135LijxJa7SeJqMtTquIYlTtc2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8abbfa9e-3975-4ed9-8f22-0ab8c2a7a472",
                            TwoFactorEnabled = false,
                            UserName = "mgt"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
