// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NMC.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NMC.Migrations
{
    [DbContext(typeof(MedContext))]
    [Migration("20201206131137_M1")]
    partial class M1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b5b52d8c-556f-4da4-84c1-437e62e6cda1",
                            RoleId = "Administration"
                        },
                        new
                        {
                            UserId = "0da5b169-b24c-4768-a939-0b1c2fd0985b",
                            RoleId = "Admission"
                        },
                        new
                        {
                            UserId = "3b0d9298-c0a1-420a-b755-59e7ac706bfa",
                            RoleId = "Reception"
                        },
                        new
                        {
                            UserId = "4e9bcd46-fc94-4394-9b27-9492edaaa6f0",
                            RoleId = "Laboratory"
                        },
                        new
                        {
                            UserId = "92fc2734-5b36-4a8b-9569-4df2cb1c99b5",
                            RoleId = "Management"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("NMC.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "Administration",
                            ConcurrencyStamp = "855c48d7-7d6a-40d0-a64e-82681dd0e0aa",
                            Name = "Administration",
                            NormalizedName = "Administration"
                        },
                        new
                        {
                            Id = "Admission",
                            ConcurrencyStamp = "69d81875-703c-4011-b525-3f0e28b1b160",
                            Name = "Admission",
                            NormalizedName = "Admission"
                        },
                        new
                        {
                            Id = "Reception",
                            ConcurrencyStamp = "477fa4cc-fdd5-4e58-8cf4-132a14932d36",
                            Name = "Reception",
                            NormalizedName = "Reception"
                        },
                        new
                        {
                            Id = "Doctor",
                            ConcurrencyStamp = "87be5950-2bae-42b5-8638-445f104b8223",
                            Name = "Doctor",
                            NormalizedName = "Doctor"
                        },
                        new
                        {
                            Id = "Laboratory",
                            ConcurrencyStamp = "e25d8922-d324-42eb-b0b8-a184c0b55359",
                            Name = "Laboratory",
                            NormalizedName = "Laboratory"
                        },
                        new
                        {
                            Id = "Management",
                            ConcurrencyStamp = "83775708-246a-4611-8b78-3d6cd09cc588",
                            Name = "Management",
                            NormalizedName = "Management"
                        });
                });

            modelBuilder.Entity("NMC.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName")
                        .HasName("AK_Username");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "b5b52d8c-556f-4da4-84c1-437e62e6cda1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6724f63-2a63-43e1-aac8-75bea8682e1d",
                            Email = "admin@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENaXmE5tL5McHwSuX5IqYgwRC0NyCVFUhHh4z/wlaCuyYTiSi0qEkvESPTrK0RKI/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a82be335-d428-478a-911a-d4ed455557a8",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "0da5b169-b24c-4768-a939-0b1c2fd0985b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfe2fa92-7ba1-4c05-83b8-85c122ef8291",
                            Email = "admission@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMISSION@HOSPITAL",
                            NormalizedUserName = "ADMISSION",
                            PasswordHash = "AQAAAAEAACcQAAAAECEQJPkOzzyHybfgXqvxjqhS15rZZ2iVtA+EhOshB1WPT2cyT8eGBUN1LFJUAOJGxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4e4ca2c-61e7-453b-a814-b89198d94107",
                            TwoFactorEnabled = false,
                            UserName = "admission"
                        },
                        new
                        {
                            Id = "3b0d9298-c0a1-420a-b755-59e7ac706bfa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8eb943fd-616c-417f-997d-57be00a00f5d",
                            Email = "reception@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RECEPTION@HOSPITAL",
                            NormalizedUserName = "RECEPTION",
                            PasswordHash = "AQAAAAEAACcQAAAAEPMRh1tT/H0crmRnhRjn/1KVDvHHKrA9fzHNst1agQQtPlwQ43bPqa5HOR+0D+7V9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bcb45f0f-360a-4466-a79e-4dedf364182f",
                            TwoFactorEnabled = false,
                            UserName = "reception"
                        },
                        new
                        {
                            Id = "4e9bcd46-fc94-4394-9b27-9492edaaa6f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdd23eca-243e-41b6-aee6-495dcafb4700",
                            Email = "lab@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LAB@HOSPITAL",
                            NormalizedUserName = "LAB",
                            PasswordHash = "AQAAAAEAACcQAAAAEPjCZpHuqtixC5EzhnPdaG2rsMPDjmvpUofdTk9bmGU8BnC0xQw1GigCBPTanYm+9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fd41bbc-787c-4250-bc78-0da189f4ad11",
                            TwoFactorEnabled = false,
                            UserName = "lab"
                        },
                        new
                        {
                            Id = "92fc2734-5b36-4a8b-9569-4df2cb1c99b5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6a0f1d9-474c-4e41-9f5f-38210a916fd7",
                            Email = "management@hospital",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGEMENT@HOSPITAL",
                            NormalizedUserName = "MANAGEMENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEKrXhFKm5Lxx0pfnPAzgUi8ZgiXIxf4ZRxfIlrTcHjD1c4gyjrFu/r8SGUfxeZsvCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1afa47d7-3d51-43cd-8b12-e8cc74fe23c8",
                            TwoFactorEnabled = false,
                            UserName = "management"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
