// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NMC.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NMC.Migrations
{
    [DbContext(typeof(MedContext))]
    [Migration("20201202154402_M1")]
    partial class M1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "098c3aac-d697-4428-a74a-8d08cb5a247e"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "2ce4de5d-c57f-4988-8b8e-7d4d496cc8b7"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "54143932-f9d0-430c-9756-c62441a1c08a"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = "93de76c0-6e25-4a33-a25c-41eb999af4a6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "098c3aac-d697-4428-a74a-8d08cb5a247e",
                            RoleId = "ADMIN"
                        },
                        new
                        {
                            UserId = "2ce4de5d-c57f-4988-8b8e-7d4d496cc8b7",
                            RoleId = "FD"
                        },
                        new
                        {
                            UserId = "54143932-f9d0-430c-9756-c62441a1c08a",
                            RoleId = "ACT"
                        },
                        new
                        {
                            UserId = "93de76c0-6e25-4a33-a25c-41eb999af4a6",
                            RoleId = "MGT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("NMC.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "ded154fe-491e-46c3-abf1-01c3d2068e80",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "DOCTOR",
                            ConcurrencyStamp = "d0db8c15-f779-4d5f-932f-534063926611",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "FD",
                            ConcurrencyStamp = "1992849a-3423-4e64-a405-a89ec9d4ee3a",
                            Name = "Front Desk",
                            NormalizedName = "FRONT DESK"
                        },
                        new
                        {
                            Id = "LABD",
                            ConcurrencyStamp = "a0c7d4e6-49ef-430d-8fea-3b631b2a0f45",
                            Name = "Laboratory Doctor",
                            NormalizedName = "LABORATORY DOCTOR"
                        },
                        new
                        {
                            Id = "LABT",
                            ConcurrencyStamp = "87b586e4-9571-45cf-9836-9e842d2a9e49",
                            Name = "Laboratory Technician",
                            NormalizedName = "LABORATORY TECHNICIAN"
                        },
                        new
                        {
                            Id = "ACT",
                            ConcurrencyStamp = "4d13f57e-6c8b-45e1-8560-faeef23bb880",
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = "MGT",
                            ConcurrencyStamp = "a9fa75f7-9984-4db8-be62-ef9263eae5d1",
                            Name = "Management",
                            NormalizedName = "MANAGEMENT"
                        });
                });

            modelBuilder.Entity("NMC.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName")
                        .HasName("AK_Username");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "098c3aac-d697-4428-a74a-8d08cb5a247e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4e7a49b-9677-46a5-b31d-c50e1f5f55f5",
                            Email = "admin@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECz462bKW7kEidNB6BCjGod+PUsQ+8INkfFkdukslaVS9U1ziHqikN7g72gZXna7JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "436712fb-78aa-4e50-85bb-e466559013f9",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2ce4de5d-c57f-4988-8b8e-7d4d496cc8b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fbfff2b2-6354-40c6-8214-4c02da3e10a5",
                            Email = "fd@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FD@LOCALHOST",
                            NormalizedUserName = "FD",
                            PasswordHash = "AQAAAAEAACcQAAAAEHXcMylYkbhQW9/HldVq/yA/9MNIk+ha5932Rd7MNT8/7vm/IPAfPRLLrYLDZyW4Bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a018329-1d31-4451-be70-e94b89123b53",
                            TwoFactorEnabled = false,
                            UserName = "fd"
                        },
                        new
                        {
                            Id = "54143932-f9d0-430c-9756-c62441a1c08a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10397911-45d1-4f5a-821f-f7b7a4dde029",
                            Email = "act@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACT@LOCALHOST",
                            NormalizedUserName = "ACT",
                            PasswordHash = "AQAAAAEAACcQAAAAEOyK/0exLHZ015o2xkQXTiVPK4+2S1FXrnOa4qIN2wL0wcOwvQc1E5lqzaUedU8XSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f89be2d-13e5-4652-821a-f68ce40e4000",
                            TwoFactorEnabled = false,
                            UserName = "act"
                        },
                        new
                        {
                            Id = "93de76c0-6e25-4a33-a25c-41eb999af4a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5568b232-a14a-4618-9f00-5796ba37e65e",
                            Email = "mgt@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MGT@LOCALHOST",
                            NormalizedUserName = "MGT",
                            PasswordHash = "AQAAAAEAACcQAAAAEGL+rhXaXX4h3WUpxhuNa3qKv8GrJL0VNffxApBgc42M2YQCXDy+pbKCE71NlAvGVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40c18e42-8b00-47c4-b262-f4d2e68a0e8c",
                            TwoFactorEnabled = false,
                            UserName = "mgt"
                        });
                });

            modelBuilder.Entity("NMC.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNameAlt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parties");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Party");
                });

            modelBuilder.Entity("NMC.Models.PartyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("PartyContact");
                });

            modelBuilder.Entity("NMC.Models.PartyIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("PartyIdentifier");
                });

            modelBuilder.Entity("NMC.Models.PartyRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleTypeId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Thru")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("RoleTypeId");

                    b.ToTable("PartyRoles");
                });

            modelBuilder.Entity("NMC.Models.RoleType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleTypes");
                });

            modelBuilder.Entity("NMC.Models.Organization", b =>
                {
                    b.HasBaseType("NMC.Models.Party");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFormal")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("NMC.Models.Person", b =>
                {
                    b.HasBaseType("NMC.Models.Party");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FatherNameAlt")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FirstNameAlt")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LastNameAlt")
                        .HasColumnType("text");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("MotherName")
                        .HasColumnType("text");

                    b.Property<string>("MotherNameAlt")
                        .HasColumnType("text");

                    b.Property<int>("NumOfDependents")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NMC.Models.PartyContact", b =>
                {
                    b.HasOne("NMC.Models.Party", "Party")
                        .WithMany("Contacts")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("NMC.Models.PartyIdentifier", b =>
                {
                    b.HasOne("NMC.Models.Party", "Party")
                        .WithMany("Identifiers")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("NMC.Models.PartyRole", b =>
                {
                    b.HasOne("NMC.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.RoleType", "RoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeId");

                    b.Navigation("Party");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("NMC.Models.Party", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Identifiers");
                });
#pragma warning restore 612, 618
        }
    }
}
