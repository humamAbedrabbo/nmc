// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NMC.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NMC.Migrations
{
    [DbContext(typeof(MedContext))]
    [Migration("20201215071040_Create_Main_Schema")]
    partial class Create_Main_Schema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DoctorSpeciality", b =>
                {
                    b.Property<int>("DoctorsId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialitiesId")
                        .HasColumnType("integer");

                    b.HasKey("DoctorsId", "SpecialitiesId");

                    b.HasIndex("SpecialitiesId");

                    b.ToTable("DoctorSpeciality");
                });

            modelBuilder.Entity("NMC.Models.AdmissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(10L, null, null, null, null, null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.ToTable("AdmissionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Normal",
                            NameAr = "عادي",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Emergency",
                            NameAr = "إسعاف",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Accident",
                            NameAr = "حادث",
                            SortKey = 0
                        });
                });

            modelBuilder.Entity("NMC.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(10L, null, null, null, null, null);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "faa95a6b-5c3e-46d4-b265-364a5b361b8f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "989cb316-dbfa-4d9a-a7f2-9c104dc7cdf1",
                            Name = "Admission Officer",
                            NormalizedName = "ADMISSION OFFICER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "55b3518b-715c-48f2-9870-2cbbe26e975e",
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "dae65000-7c65-4e5d-8a27-d59e87d8273b",
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "69a932c2-6c7a-4208-95f6-aad8fbaf265b",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("NMC.Models.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("NMC.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(10L, null, null, null, null, null);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName")
                        .HasName("AK_Username");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38d58f58-fbe7-400e-9c2c-b6b14fac1d3c",
                            Email = "admin@nmc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@NMC",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEF1/IZIw3ZtqhiabjXY0IBgrgVs/KaWzb+sLZUXpFkVjgOVeAfFc8PFsvOGi8UDQAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e572cbdb-80bb-4269-a21d-043199cbe0f6",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24c51a31-326d-4a3d-ad30-fd85f06507bd",
                            Email = "adm@nmc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADM@NMC",
                            NormalizedUserName = "ADM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEdavvXz1IfpJeSg354gyJX7UPj0zVSuHw4LO2IORYNSoZYlt4ot9aqKxv74id1ZIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "516ae177-3d42-4888-817e-6d0519272f92",
                            TwoFactorEnabled = false,
                            UserName = "adm"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8e6e7a6-dd96-4850-8d3d-75c63443812f",
                            Email = "acc@nmc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACC@NMC",
                            NormalizedUserName = "ACC",
                            PasswordHash = "AQAAAAEAACcQAAAAEN3tpuw68CMTYCg8xO1a4eLwoM0f8yuFbsxChZSFRpCrolh0S7ZGRSq43QD2FWIIrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c94b16d-8f57-43bd-be79-24d16e7990bc",
                            TwoFactorEnabled = false,
                            UserName = "acc"
                        });
                });

            modelBuilder.Entity("NMC.Models.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(10L, null, null, null, null, null);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Language",
                            ClaimValue = "en",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("NMC.Models.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("NMC.Models.AppUserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            RoleId = 4,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("NMC.Models.AppUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("UserId1");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("NMC.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Visitor")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<int?>("WardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDate");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("Phone");

                    b.HasIndex("WardId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("NMC.Models.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(10L, null, null, null, null, null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Routine checkup",
                            NameAr = "فحص روتيني",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Consulting",
                            NameAr = "استشارة طبية",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vaccinations",
                            NameAr = "لقاح",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Eye Care",
                            NameAr = "عينية",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Radiology",
                            NameAr = "تصوير شعاعي",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 6,
                            Name = "Referrals",
                            NameAr = "إحالة",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 7,
                            Name = "Other",
                            NameAr = "نوع آخر",
                            SortKey = 0
                        });
                });

            modelBuilder.Entity("NMC.Models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("BillNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InpatientId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BillNo");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DueDate");

                    b.HasIndex("InpatientId");

                    b.HasIndex("Status");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("NMC.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("DownPayment")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("Name");

                    b.HasIndex("RequestDate");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("NMC.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(3L, null, null, null, null, null);

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.Property<string>("TelecomCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name");

                    b.HasIndex("NameAr");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = "SY",
                            Name = "Damascus",
                            NameAr = "دمشق",
                            SortKey = 0,
                            TelecomCode = "11"
                        });
                });

            modelBuilder.Entity("NMC.Models.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("LanguageId")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NationalityNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.Property<string>("TelecomCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.HasIndex("NationalityName")
                        .IsUnique();

                    b.HasIndex("NationalityNameAr")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = "SY",
                            LanguageId = "ar",
                            Name = "Syria",
                            NameAr = "سورية",
                            NationalityName = "Syrian",
                            NationalityNameAr = "سوري",
                            SortKey = 0,
                            TelecomCode = "963"
                        },
                        new
                        {
                            Id = "US",
                            LanguageId = "en",
                            Name = "USA",
                            NameAr = "أمريكي",
                            NationalityName = "American",
                            NationalityNameAr = "أمريكي",
                            SortKey = 0,
                            TelecomCode = "1"
                        });
                });

            modelBuilder.Entity("NMC.Models.DischargeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(10L, null, null, null, null, null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.ToTable("DischargeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Healing",
                            NameAr = "شفاء",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Improvement",
                            NameAr = "تحسن",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ill",
                            NameAr = "سوء",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Death",
                            NameAr = "وفاة",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Other",
                            NameAr = "أخرى",
                            SortKey = 0
                        });
                });

            modelBuilder.Entity("NMC.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<bool>("Consultant")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<bool>("Referrer")
                        .HasColumnType("boolean");

                    b.Property<bool>("Surgeon")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("WardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.HasIndex("Mobile");

                    b.HasIndex("Phone");

                    b.HasIndex("WardId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("NMC.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Grade")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("NMC.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("BillId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PurchaseFrom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PurchasedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("RoomNo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ItemCode");

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("RoomNo");

                    b.HasIndex("Status");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("NMC.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("PeriodFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PeriodTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("NMC.Models.Inpatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AdmissionNote")
                        .HasColumnType("text");

                    b.Property<int?>("AdmissionTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Alcohol")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BarCodeGenerated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BarCodeUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bed")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer");

                    b.Property<string>("Companion")
                        .HasColumnType("text");

                    b.Property<string>("DeceaseNote")
                        .HasColumnType("text");

                    b.Property<bool>("Deceased")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DeceasedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Diabeties")
                        .HasColumnType("text");

                    b.Property<string>("DiabetiesNotes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DischargeNote")
                        .HasColumnType("text");

                    b.Property<int?>("DischargeTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Diseases")
                        .HasColumnType("text");

                    b.Property<string>("DiseasesNotes")
                        .HasColumnType("text");

                    b.Property<string>("FileNo")
                        .HasColumnType("text");

                    b.Property<string>("FoodAllergies")
                        .HasColumnType("text");

                    b.Property<string>("FoodAllergyNote")
                        .HasColumnType("text");

                    b.Property<string>("GLAccount")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("GradeLevelFactor")
                        .HasColumnType("integer");

                    b.Property<string>("Meals")
                        .HasColumnType("text");

                    b.Property<string>("MedicalAllergies")
                        .HasColumnType("text");

                    b.Property<string>("MedicalAllergyNote")
                        .HasColumnType("text");

                    b.Property<string>("Medicines")
                        .HasColumnType("text");

                    b.Property<string>("MedicinesNotes")
                        .HasColumnType("text");

                    b.Property<int>("MinDownPayment")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("PoliceRef")
                        .HasColumnType("text");

                    b.Property<int?>("ReferrerId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomGradeId")
                        .HasColumnType("integer");

                    b.Property<string>("RoomNo")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Smoking")
                        .HasColumnType("text");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("WardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("AdmissionDate");

                    b.HasIndex("AdmissionTypeId");

                    b.HasIndex("Bed");

                    b.HasIndex("BookingId");

                    b.HasIndex("DischargeDate");

                    b.HasIndex("DischargeTypeId");

                    b.HasIndex("FileNo");

                    b.HasIndex("GLAccount");

                    b.HasIndex("PatientId");

                    b.HasIndex("PoliceRef");

                    b.HasIndex("ReferrerId");

                    b.HasIndex("RoomGradeId");

                    b.HasIndex("RoomNo");

                    b.HasIndex("WardId");

                    b.ToTable("Inpatients");
                });

            modelBuilder.Entity("NMC.Models.InpatientStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("InpatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StatusTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InpatientId");

                    b.HasIndex("Name");

                    b.HasIndex("StatusTime");

                    b.ToTable("InpatientStatuses");
                });

            modelBuilder.Entity("NMC.Models.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasIdentityOptions(3L, null, null, null, null, null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = "en",
                            Name = "Emglish",
                            NameAr = "انجليزي",
                            SortKey = 0
                        },
                        new
                        {
                            Id = "ar",
                            Name = "Arabic",
                            NameAr = "عربي",
                            SortKey = 0
                        });
                });

            modelBuilder.Entity("NMC.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BloodType")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("Children")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EmergencyAddress")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmergencyMobile")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NationalityId")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Occupation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SponsorAddress")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("SponsorContact")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SponsorMobile")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SponsorPhone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("FirstName");

                    b.HasIndex("IdentityNo");

                    b.HasIndex("LastName");

                    b.HasIndex("Mobile");

                    b.HasIndex("NationalityId");

                    b.HasIndex("Phone");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("NMC.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BillId")
                        .HasColumnType("integer");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("money");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("PaidDate");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("NMC.Models.Room", b =>
                {
                    b.Property<string>("RoomNo")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomGradeId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("WardId")
                        .HasColumnType("integer");

                    b.HasKey("RoomNo");

                    b.HasIndex("RoomGradeId");

                    b.HasIndex("RoomNo")
                        .IsUnique();

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("WardId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomNo = "10",
                            Floor = 1,
                            RoomGradeId = 2,
                            RoomTypeId = 1,
                            WardId = 1
                        },
                        new
                        {
                            RoomNo = "11",
                            Floor = 1,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 1
                        },
                        new
                        {
                            RoomNo = "12",
                            Floor = 1,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 1
                        },
                        new
                        {
                            RoomNo = "13",
                            Floor = 1,
                            RoomGradeId = 4,
                            RoomTypeId = 1,
                            WardId = 1
                        },
                        new
                        {
                            RoomNo = "14",
                            Floor = 1,
                            RoomGradeId = 4,
                            RoomTypeId = 1,
                            WardId = 1
                        },
                        new
                        {
                            RoomNo = "15",
                            Floor = 1,
                            RoomGradeId = 4,
                            RoomTypeId = 1,
                            WardId = 1
                        },
                        new
                        {
                            RoomNo = "20",
                            Floor = 2,
                            RoomGradeId = 4,
                            RoomTypeId = 1,
                            WardId = 2
                        },
                        new
                        {
                            RoomNo = "21",
                            Floor = 2,
                            RoomGradeId = 4,
                            RoomTypeId = 1,
                            WardId = 2
                        },
                        new
                        {
                            RoomNo = "22",
                            Floor = 2,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 2
                        },
                        new
                        {
                            RoomNo = "23",
                            Floor = 2,
                            RoomGradeId = 1,
                            RoomTypeId = 1,
                            WardId = 2
                        },
                        new
                        {
                            RoomNo = "24",
                            Floor = 2,
                            RoomGradeId = 2,
                            RoomTypeId = 1,
                            WardId = 2
                        },
                        new
                        {
                            RoomNo = "25",
                            Floor = 2,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 2
                        },
                        new
                        {
                            RoomNo = "30",
                            Floor = 3,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            RoomNo = "31",
                            Floor = 3,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            RoomNo = "32",
                            Floor = 3,
                            RoomGradeId = 4,
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            RoomNo = "33",
                            Floor = 3,
                            RoomGradeId = 4,
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            RoomNo = "34",
                            Floor = 3,
                            RoomGradeId = 1,
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            RoomNo = "35",
                            Floor = 3,
                            RoomGradeId = 2,
                            RoomTypeId = 1,
                            WardId = 3
                        },
                        new
                        {
                            RoomNo = "40",
                            Floor = 4,
                            RoomGradeId = 2,
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            RoomNo = "41",
                            Floor = 4,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            RoomNo = "42",
                            Floor = 4,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            RoomNo = "43",
                            Floor = 4,
                            RoomGradeId = 4,
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            RoomNo = "44",
                            Floor = 4,
                            RoomGradeId = 4,
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            RoomNo = "45",
                            Floor = 4,
                            RoomGradeId = 1,
                            RoomTypeId = 1,
                            WardId = 4
                        },
                        new
                        {
                            RoomNo = "50",
                            Floor = 5,
                            RoomGradeId = 4,
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            RoomNo = "51",
                            Floor = 5,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            RoomNo = "52",
                            Floor = 5,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            RoomNo = "53",
                            Floor = 5,
                            RoomGradeId = 2,
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            RoomNo = "54",
                            Floor = 5,
                            RoomGradeId = 2,
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            RoomNo = "55",
                            Floor = 5,
                            RoomGradeId = 2,
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            RoomNo = "56",
                            Floor = 5,
                            RoomGradeId = 1,
                            RoomTypeId = 1,
                            WardId = 5
                        },
                        new
                        {
                            RoomNo = "60",
                            Floor = 6,
                            RoomGradeId = 1,
                            RoomTypeId = 1,
                            WardId = 6
                        },
                        new
                        {
                            RoomNo = "61",
                            Floor = 6,
                            RoomGradeId = 1,
                            RoomTypeId = 1,
                            WardId = 6
                        },
                        new
                        {
                            RoomNo = "62",
                            Floor = 6,
                            RoomGradeId = 2,
                            RoomTypeId = 1,
                            WardId = 6
                        },
                        new
                        {
                            RoomNo = "63",
                            Floor = 6,
                            RoomGradeId = 2,
                            RoomTypeId = 1,
                            WardId = 6
                        },
                        new
                        {
                            RoomNo = "64",
                            Floor = 6,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 6
                        },
                        new
                        {
                            RoomNo = "65",
                            Floor = 6,
                            RoomGradeId = 3,
                            RoomTypeId = 1,
                            WardId = 6
                        },
                        new
                        {
                            RoomNo = "66",
                            Floor = 6,
                            RoomGradeId = 4,
                            RoomTypeId = 1,
                            WardId = 6
                        });
                });

            modelBuilder.Entity("NMC.Models.RoomAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InpatientId")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("RoomNo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("Date");

                    b.HasIndex("InpatientId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomNo");

                    b.HasIndex("Status");

                    b.ToTable("RoomAllocations");
                });

            modelBuilder.Entity("NMC.Models.RoomGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(10L, null, null, null, null, null);

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.ToTable("RoomGrades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 1,
                            Level = 10,
                            Name = "Suite",
                            NameAr = "جناح",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 1,
                            Level = 9,
                            Name = "Excellent Class",
                            NameAr = "درجة ممتازة",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 1,
                            Level = 8,
                            Name = "First Class",
                            NameAr = "درجة أولى",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 2,
                            Level = 2,
                            Name = "Second Class",
                            NameAr = "درجة ثانية",
                            SortKey = 0
                        });
                });

            modelBuilder.Entity("NMC.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(10L, null, null, null, null, null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Patient Room",
                            NameAr = "غرفة مريض",
                            SortKey = 0
                        });
                });

            modelBuilder.Entity("NMC.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Days")
                        .HasColumnType("text");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("FromDate");

                    b.HasIndex("ThruDate");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("NMC.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("NMC.Models.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(15L, null, null, null, null, null);

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Floor = 1,
                            Name = "Pediatric Department -  Incubators section (NICU)",
                            NameAr = "جناح الأطفال - قسم الحواضن",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 2,
                            Floor = 2,
                            Name = "Internal Medicine",
                            NameAr = "قسم الداخلية الباطنية",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 3,
                            Floor = 3,
                            Name = "Intensive Care Unite (ICU)",
                            NameAr = "قسم العناية المشددة",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 4,
                            Floor = 4,
                            Name = "Obstetric & Genecology",
                            NameAr = "جناح النسائية والمخاض",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 5,
                            Floor = 5,
                            Name = "Dialysis",
                            NameAr = "قسم غسيل الكلى",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 6,
                            Floor = 6,
                            Name = "Arthroscopy",
                            NameAr = "قسم التنظير",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 7,
                            Floor = 6,
                            Name = "Cath Lab - Cardiovascular (CCU)",
                            NameAr = "قسم العناية القلبة والقثطرة القلبية",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 8,
                            Floor = 6,
                            Name = "Blood vessels",
                            NameAr = "قسم الأوعية",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 9,
                            Floor = -1,
                            Name = "Urology",
                            NameAr = "قسم البولية",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 10,
                            Floor = 0,
                            Name = "Respiratory System Diseases",
                            NameAr = "أمراض الجهاز التنفسي",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 11,
                            Floor = 4,
                            Name = "Emergency (ER)",
                            NameAr = "قسم الإسعاف والطوارئ",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 12,
                            Floor = -1,
                            Name = "Laboratory",
                            NameAr = "المخبر",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 13,
                            Floor = -1,
                            Name = "Radiography",
                            NameAr = "قسم التصوير الشعاعي",
                            SortKey = 0
                        },
                        new
                        {
                            Id = 14,
                            Floor = -2,
                            Name = "Operation Rooms (OR)",
                            NameAr = "جناح العمليات",
                            SortKey = 0
                        });
                });

            modelBuilder.Entity("DoctorSpeciality", b =>
                {
                    b.HasOne("NMC.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.Speciality", null)
                        .WithMany()
                        .HasForeignKey("SpecialitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NMC.Models.AppRoleClaim", b =>
                {
                    b.HasOne("NMC.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.AppRole", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NMC.Models.AppUser", b =>
                {
                    b.HasOne("NMC.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("NMC.Models.AppUserClaim", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.AppUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NMC.Models.AppUserLogin", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.AppUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NMC.Models.AppUserRole", b =>
                {
                    b.HasOne("NMC.Models.AppRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NMC.Models.AppUserToken", b =>
                {
                    b.HasOne("NMC.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.AppUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NMC.Models.Appointment", b =>
                {
                    b.HasOne("NMC.Models.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("NMC.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("NMC.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("NMC.Models.Bill", b =>
                {
                    b.HasOne("NMC.Models.Inpatient", "Inpatient")
                        .WithMany("Bills")
                        .HasForeignKey("InpatientId");

                    b.Navigation("Inpatient");
                });

            modelBuilder.Entity("NMC.Models.Booking", b =>
                {
                    b.HasOne("NMC.Models.Doctor", "Doctor")
                        .WithMany("Bookings")
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("NMC.Models.City", b =>
                {
                    b.HasOne("NMC.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NMC.Models.Country", b =>
                {
                    b.HasOne("NMC.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NMC.Models.Doctor", b =>
                {
                    b.HasOne("NMC.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("NMC.Models.Education", b =>
                {
                    b.HasOne("NMC.Models.Doctor", "Doctor")
                        .WithMany("Educations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("NMC.Models.Expense", b =>
                {
                    b.HasOne("NMC.Models.Bill", "Bill")
                        .WithMany("ExpenseItems")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("NMC.Models.Experience", b =>
                {
                    b.HasOne("NMC.Models.Doctor", "Doctor")
                        .WithMany("Experiences")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("NMC.Models.Inpatient", b =>
                {
                    b.HasOne("NMC.Models.AdmissionType", "AdmissionType")
                        .WithMany()
                        .HasForeignKey("AdmissionTypeId");

                    b.HasOne("NMC.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("NMC.Models.DischargeType", "DischargeType")
                        .WithMany()
                        .HasForeignKey("DischargeTypeId");

                    b.HasOne("NMC.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.Doctor", "Referrer")
                        .WithMany()
                        .HasForeignKey("ReferrerId");

                    b.HasOne("NMC.Models.RoomGrade", "RoomGrade")
                        .WithMany()
                        .HasForeignKey("RoomGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomNo");

                    b.HasOne("NMC.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmissionType");

                    b.Navigation("Booking");

                    b.Navigation("DischargeType");

                    b.Navigation("Patient");

                    b.Navigation("Referrer");

                    b.Navigation("Room");

                    b.Navigation("RoomGrade");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("NMC.Models.InpatientStatus", b =>
                {
                    b.HasOne("NMC.Models.Inpatient", "Inpatient")
                        .WithMany("Statuses")
                        .HasForeignKey("InpatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inpatient");
                });

            modelBuilder.Entity("NMC.Models.Patient", b =>
                {
                    b.HasOne("NMC.Models.Country", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("NMC.Models.Payment", b =>
                {
                    b.HasOne("NMC.Models.Bill", "Bill")
                        .WithMany("Payments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("NMC.Models.Room", b =>
                {
                    b.HasOne("NMC.Models.RoomGrade", "RoomGrade")
                        .WithMany()
                        .HasForeignKey("RoomGradeId");

                    b.HasOne("NMC.Models.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NMC.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");

                    b.Navigation("RoomGrade");

                    b.Navigation("RoomType");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("NMC.Models.RoomAllocation", b =>
                {
                    b.HasOne("NMC.Models.Booking", "Booking")
                        .WithMany("Allocations")
                        .HasForeignKey("BookingId");

                    b.HasOne("NMC.Models.Inpatient", "Inpatient")
                        .WithMany("Allocations")
                        .HasForeignKey("InpatientId");

                    b.HasOne("NMC.Models.Patient", "Patient")
                        .WithMany("Allocations")
                        .HasForeignKey("PatientId");

                    b.HasOne("NMC.Models.Room", "Room")
                        .WithMany("Allocations")
                        .HasForeignKey("RoomNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Inpatient");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("NMC.Models.Schedule", b =>
                {
                    b.HasOne("NMC.Models.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("NMC.Models.AppRole", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("NMC.Models.AppUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("NMC.Models.Bill", b =>
                {
                    b.Navigation("ExpenseItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("NMC.Models.Booking", b =>
                {
                    b.Navigation("Allocations");
                });

            modelBuilder.Entity("NMC.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("NMC.Models.Doctor", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("NMC.Models.Inpatient", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Bills");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("NMC.Models.Patient", b =>
                {
                    b.Navigation("Allocations");
                });

            modelBuilder.Entity("NMC.Models.Room", b =>
                {
                    b.Navigation("Allocations");
                });
#pragma warning restore 612, 618
        }
    }
}
